step "update-ami-id" {
    name = "Find Offline Target Group"

    action {
        action_type = "Octopus.AwsRunScript"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "ap-southeast-2"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Acocunt"
            Octopus.Action.GitRepository.Source = "External"
            Octopus.Action.Script.ScriptFileName = "scripts/find-offline-stack.sh"
            Octopus.Action.Script.ScriptParameters = "#{AWS.ALB.Listener} #{AWS.ALB.ListenerRule} #{AWS.ALB.GreenTargetGroup} #{AWS.ALB.BlueTargetGroup}"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "octopusdeploy/worker-tools:6.3.0-ubuntu.22.04"
        }

        git_dependencies {
            default_branch = "main"
            git_credential_type = "Anonymous"
            repository_uri = "https://github.com/mcasperson/PackerDemo.git"
        }
    }
}

step "find-offline-target-asg" {
    name = "Find Offline Target ASG"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.GitRepository.Source = "External"
            Octopus.Action.Script.ScriptFileName = "scripts/find-offline-asg.sh"
            Octopus.Action.Script.ScriptParameters = "#{Octopus.Action[Find Offline Target Group].Output.InactiveGroupColor} #{AWS.ASG.Green} #{AWS.ASG.Blue}"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool = "hosted-ubuntu"

        git_dependencies {
            default_branch = "main"
            git_credential_type = "Anonymous"
            repository_uri = "https://github.com/mcasperson/PackerDemo.git"
        }
    }
}

step "update-ami-id-1" {
    name = "Update AMI ID"

    action {
        action_type = "Octopus.AwsRunScript"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "ap-southeast-2"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Acocunt"
            Octopus.Action.GitRepository.Source = "External"
            Octopus.Action.Script.ScriptFileName = "scripts/update-ami.sh"
            Octopus.Action.Script.ScriptParameters = "#{Octopus.Action[Find Offline Target ASG].Output.InactiveGroup} #{AWS.AMI.ID} #{Octopus.Release.Number}"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "octopusdeploy/worker-tools:6.3.0-ubuntu.22.04"
        }

        git_dependencies {
            default_branch = "main"
            git_credential_type = "Anonymous"
            repository_uri = "https://github.com/mcasperson/PackerDemo.git"
        }
    }
}

step "wait-for-refresh" {
    name = "Wait for Refresh"

    action {
        action_type = "Octopus.AwsRunScript"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "ap-southeast-2"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Acocunt"
            Octopus.Action.GitRepository.Source = "External"
            Octopus.Action.Script.ScriptFileName = "scripts/wait-for-refresh.sh"
            Octopus.Action.Script.ScriptParameters = "#{Octopus.Action[Find Offline Target ASG].Output.InactiveGroup}"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "octopusdeploy/worker-tools:6.3.0-ubuntu.22.04"
        }

        git_dependencies {
            default_branch = "main"
            git_credential_type = "Anonymous"
            repository_uri = "https://github.com/mcasperson/PackerDemo.git"
        }
    }
}

step "switch-traffic" {
    name = "Switch Traffic"

    action {
        action_type = "Octopus.AwsRunScript"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "ap-southeast-2"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Acocunt"
            Octopus.Action.GitRepository.Source = "External"
            Octopus.Action.Script.ScriptFileName = "scripts/modify-lb-listener-rule.sh"
            Octopus.Action.Script.ScriptParameters = "#{AWS.ALB.ListenerRule} #{Octopus.Action[Find Offline Target Group].Output.ActiveGroupArn} #{Octopus.Action[Find Offline Target Group].Output.InactiveGroupArn}"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "dockerhub"
            image = "octopusdeploy/worker-tools:6.3.0-ubuntu.22.04"
        }

        git_dependencies {
            default_branch = "main"
            git_credential_type = "Anonymous"
            repository_uri = "https://github.com/mcasperson/PackerDemo.git"
        }
    }
}

step "show-url" {
    name = "Show URL"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = "write_highlight \"[http://packer-alb-575106977.ap-southeast-2.elb.amazonaws.com/](http://packer-alb-575106977.ap-southeast-2.elb.amazonaws.com/)\""
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "aws-find-blue-green-target-group" {
    name = "AWS - Find Blue-Green Target Group"

    action {
        properties = {
            AWSBlueGreen.AWS.Account = "AWS.Acocunt"
            AWSBlueGreen.AWS.BlueTargetGroup = "#{AWS.ALB.BlueTargetGroup}"
            AWSBlueGreen.AWS.GreenTargetGroup = "#{AWS.ALB.GreenTargetGroup}"
            AWSBlueGreen.AWS.ListenerARN = "#{AWS.ALB.Listener}"
            AWSBlueGreen.AWS.Region = "#{AWS.Region}"
            AWSBlueGreen.AWS.RuleArn = "#{AWS.ALB.ListenerRule}"
            Octopus.Action.Template.Id = "ActionTemplates-4146"
            Octopus.Action.Template.Version = "1"
        }
        worker_pool = "hosted-ubuntu"
    }
}